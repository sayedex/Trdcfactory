// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class newpool extends ethereum.Event {
  get params(): newpool__Params {
    return new newpool__Params(this);
  }
}

export class newpool__Params {
  _event: newpool;

  constructor(event: newpool) {
    this._event = event;
  }

  get Pooladresss(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TrdcFactory extends ethereum.SmartContract {
  static bind(address: Address): TrdcFactory {
    return new TrdcFactory("TrdcFactory", address);
  }

  poolad(param0: BigInt): Address {
    let result = super.call("poolad", "poolad(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_poolad(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("poolad", "poolad(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class NewPoolCall extends ethereum.Call {
  get inputs(): NewPoolCall__Inputs {
    return new NewPoolCall__Inputs(this);
  }

  get outputs(): NewPoolCall__Outputs {
    return new NewPoolCall__Outputs(this);
  }
}

export class NewPoolCall__Inputs {
  _call: NewPoolCall;

  constructor(call: NewPoolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NewPoolCall__Outputs {
  _call: NewPoolCall;

  constructor(call: NewPoolCall) {
    this._call = call;
  }
}
